[{"/Users/seminyoo/Desktop/newver2/src/index.js":"1","/Users/seminyoo/Desktop/newver2/src/App.js":"2","/Users/seminyoo/Desktop/newver2/src/reportWebVitals.js":"3"},{"size":500,"mtime":1640751751587,"results":"4","hashOfConfig":"5"},{"size":7789,"mtime":1640827837424,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1640749602782,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"12e8n6f",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/seminyoo/Desktop/newver2/src/index.js",[],["16","17"],"/Users/seminyoo/Desktop/newver2/src/App.js",["18","19","20","21","22","23"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { styled } from \"@mui/material/styles\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport styles from \"./App.css\";\nimport XRP from \"../src/logo/Ripple (XRP).png\";\nimport ENTC from \"../src/logo/entc.png\";\nimport ETH from \"../src/logo/Ethereum (ETH).png\";\nimport BTC from \"../src/logo/Bitcoin (BTC).png\";\nimport \"./App.css\";\n\nfunction App(app) {\n  const [entcWon, setEntcWon] = useState([]);\n  const [upBitBTC, setUpbitBTC] = useState([]);\n  const [upBitETH, setUpbitETH] = useState([]);\n  const [upBitXRP, setUpbitXRP] = useState([]);\n  const [binance, setBinance] = useState([]);\n  const [currency, setCurrency] = useState([]);\n\n  const getData = async () => {\n    axios\n      .all([\n        axios.get(\n          \"https://my-cors-s.herokuapp.com/https://www.bw.com/api/data/v1/ticker?marketId=4326\"\n        ),\n        axios.get(\n          \"https://my-cors-s.herokuapp.com/https://api.upbit.com/v1/ticker?markets=KRW-BTC\"\n        ),\n        axios.get(\n          \"https://my-cors-s.herokuapp.com/https://api.upbit.com/v1/ticker?markets=KRW-ETH\"\n        ),\n        axios.get(\n          \"https://my-cors-s.herokuapp.com/https://api.upbit.com/v1/ticker?markets=KRW-XRP\"\n        ),\n        axios.get(\n          \"https://my-cors-s.herokuapp.com/https://api.binance.com/api/v1/ticker/allPrices\"\n        ),\n        axios.get(\n          \"https://my-cors-s.herokuapp.com/https://exchange.jaeheon.kr:23490/query/USDKRW\"\n        ),\n      ])\n\n      .then(\n        axios.spread((res1, res2, res3, res4, res5, res6) => {\n          setEntcWon(res1.data);\n          setUpbitBTC(res2.data);\n          setUpbitETH(res3.data);\n          setUpbitXRP(res4.data);\n          setBinance(res5.data);\n          setCurrency(res6.data);\n        })\n      )\n      .catch((error) => console.log(error));\n  };\n\n  console.log(upBitETH?.[0]?.trade_price);\n\n  useEffect(() => {\n    getData();\n    setInterval(async () => {\n      getData();\n    }, 500000);\n  }, []);\n\n  const StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      fontSize: 20,\n      fontWeight: \"bold\",\n      padding: \"50px 120px 20px 120px\",\n    },\n    [`&.${tableCellClasses.body}`]: {\n      padding: \"60px 120px 60px 120px\",\n      fontSize: 30,\n      fontWeight: \"bold\",\n    },\n  }));\n\n  function createData(name, upbit, binance, change) {\n    return { name, upbit, binance, change };\n  }\n\n  function changeColor(num) {\n    if (num > 0) styles.card.color = \"red\";\n    else styles.card.color = \"green\";\n  }\n\n  const rows = [\n    createData(\n      \"Bitcoin (BTC)\",\n      Number(upBitBTC?.find((a) => a?.market === \"KRW-BTC\")?.trade_price)\n        .toFixed(0)\n        .toString()\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\n      \"$\" +\n        Number(binance?.find((a) => a?.symbol === \"BTCUSDT\")?.price).toFixed(2),\n      (\n        Number(\n          upBitBTC?.find((a) => a?.market === \"KRW-BTC\")?.signed_change_rate\n        ) * 100\n      ).toFixed(2) + \"%\"\n    ),\n    createData(\n      \"Ethereum (ETH)\",\n      Number(upBitETH?.find((a) => a?.market === \"KRW-ETH\")?.trade_price)\n        .toFixed(0)\n        .toString()\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\n      \"$\" +\n        Number(binance?.find((a) => a?.symbol === \"ETHUSDT\")?.price).toFixed(2),\n\n      (\n        Number(\n          upBitETH?.find((a) => a?.market === \"KRW-ETH\")?.signed_change_rate\n        ) * 100\n      ).toFixed(2) + \"%\"\n    ),\n    createData(\n      \"Ripple (XRP)\",\n      Number(upBitXRP?.find((a) => a?.market === \"KRW-XRP\")?.trade_price)\n        .toFixed(0)\n        .toString()\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"),\n      \"$\" +\n        Number(binance?.find((a) => a?.symbol === \"XRPUSDT\")?.price).toFixed(2),\n      (\n        Number(\n          upBitXRP?.find((a) => a?.market === \"KRW-XRP\")?.signed_change_rate\n        ) * 100\n      ).toFixed(2) + \"%\"\n    ),\n  ];\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Crypto</StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              Upbit\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              Binance\n            </StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <StyledTableCell align=\"left\">\n              <img src={ENTC} className=\"logo\" />\n              ENTERBUTTON (ENTC)\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={4}>\n              ${entcWon && entcWon.datas?.[1]} (\n              {(\n                Number(entcWon && entcWon.datas?.[1]) *\n                Number(currency?.USDKRW?.[0])\n              )\n                .toFixed(0)\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n              Ïõê)\n            </StyledTableCell>\n          </TableRow>\n          <TableRow>\n            <StyledTableCell align=\"left\">\n              <img src={BTC} className=\"logo\" />\n              Bitcoin (BTC)\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              {Number(\n                upBitBTC?.find((a) => a?.market === \"KRW-BTC\")?.trade_price\n              )\n                .toFixed(0)\n                .toString()\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              $\n              {Number(binance?.find((a) => a?.symbol === \"BTCUSDT\")?.price)\n                .toFixed(2)\n                .toString()\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n            </StyledTableCell>\n          </TableRow>\n          <TableRow>\n            <StyledTableCell align=\"left\">\n              <img src={ETH} className=\"logo\" />\n              Ethereum (ETH)\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              {Number(\n                upBitETH?.find((a) => a?.market === \"KRW-ETH\")?.trade_price\n              )\n                .toFixed(0)\n                .toString()\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              $\n              {Number(binance?.find((a) => a?.symbol === \"ETHUSDT\")?.price)\n                .toFixed(2)\n                .toString()\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n            </StyledTableCell>\n          </TableRow>\n          <TableRow>\n            <StyledTableCell align=\"left\">\n              <img src={XRP} className=\"logo\" />\n              Ripple (XRP)\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              {Number(\n                upBitXRP?.find((a) => a?.market === \"KRW-XRP\")?.trade_price\n              )\n                .toFixed(0)\n                .toString()\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\" colSpan={2}>\n              $\n              {Number(binance?.find((a) => a?.symbol === \"XRPUSDT\")?.price)\n                .toFixed(2)\n                .toString()\n                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n            </StyledTableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nexport default App;\n","/Users/seminyoo/Desktop/newver2/src/reportWebVitals.js",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":88,"column":12,"nodeType":"30","messageId":"31","endLine":88,"endColumn":23},{"ruleId":"28","severity":1,"message":"32","line":93,"column":9,"nodeType":"30","messageId":"31","endLine":93,"endColumn":13},{"ruleId":"33","severity":1,"message":"34","line":156,"column":15,"nodeType":"35","endLine":156,"endColumn":50},{"ruleId":"33","severity":1,"message":"34","line":172,"column":15,"nodeType":"35","endLine":172,"endColumn":49},{"ruleId":"33","severity":1,"message":"34","line":193,"column":15,"nodeType":"35","endLine":193,"endColumn":49},{"ruleId":"33","severity":1,"message":"34","line":214,"column":15,"nodeType":"35","endLine":214,"endColumn":49},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'changeColor' is defined but never used.","Identifier","unusedVar","'rows' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]